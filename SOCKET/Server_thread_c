//                                    ######################################################################################################
//                                    #                                                                                                    #
//                                    #                                                                                                    #
//                                    #                                 BASIC SOCKET OF A TCP SERVER IN C WITH THREADS                     #
//                                    #                                                                                                    #
//                                    #                                                                                                    #
//                                    ######################################################################################################                                                                                                   
//

// SERVER 


#include <stdio.h>
#include <string.h>
#include <winsock2.h>
#include <windows.h>
#pragma comment(lib, "ws2_32.lib") // link with winsock library
int client_count = 0;
char client_name[50];

DWORD WINAPI client_thread(LPVOID lpParam) // creating a thread to handel multipel users.
{
    SOCKET client_socket = (SOCKET)lpParam;
    char buffer[1024];
    int recv_size;
    // generate a unique client name.
    sprintf(client_name, "client%d", ++client_count);
    // step 7: Receve and echo the data.
    while (1)
    {
        recv_size = recv(client_socket, buffer, sizeof(buffer) - 1, 0);
        if (recv_size == SOCKET_ERROR)
        {
            printf("Receve failed. Error code : %d\n", WSAGetLastError());
            break;
        }
        if (recv_size == 0)
        {
            printf("%s disconnected. \n",client_name);
            break;
        }
        buffer[recv_size] = '\0';
        printf("\nRecived Message from %s : %s",client_name, buffer);
        if (send(client_socket, buffer, recv_size, 0) == SOCKET_ERROR)
        {
            printf("Send failed error code %d\n", WSAGetLastError());
            break;
        }
    }
    // step 9: close the socket.
    closesocket(client_socket);
    return 0;
}
int main()
{

    WSADATA wsa;
    SOCKET server_socket, client_socket;

    struct sockaddr_in server_addr, client_addr;
    int client_addr_len, recv_size;
    char buffer[1024];

    // step 1: Initialize winsock
    if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)
    {
        printf("Failed to initialize winsock.Error code : %d\n", WSAGetLastError());
        return -1;
    }
    printf("Winsock initialized\n");

    // STEP 2:CREATE A SOCKET
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == INVALID_SOCKET)
    {
        printf("Could not create a socket .Error code : %d\n", WSAGetLastError());
        WSACleanup();
        return -1;
    }
    printf("Socket Created .\n");

    // STEP 3: prepair the sockaddr_in structure
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(8080);

    // STEP 4: BIND THE SOCKET.
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == SOCKET_ERROR)
    {
        printf("BIND FAILED . ERROR CODE : %d\n", WSAGetLastError());
        closesocket(server_socket);
        WSACleanup();
        return 1;
    }
    printf("Bind succesfull.\n");

    // step 5: Listen to incoming connections.
    listen(server_socket, 10);
    printf("wating for incomming connections......\n");

    // step 6: Accept an incoming connection.
    while (1)
    {
        client_addr_len = sizeof(struct sockaddr_in);
        client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len);
        if (client_socket == INVALID_SOCKET)
        {
            printf("Accept failed . Error code: %d\n", WSAGetLastError());
            closesocket(server_socket);
            WSACleanup();
            return 1;
        }
        printf("Connection accepted.\n");
        // cretae a new thread to handel the client communicatin.

        HANDLE hThread = CreateThread(
            NULL,
            0,
            client_thread,
            (LPVOID)client_socket,
            0,
            NULL);
        if (hThread == NULL)
        {
            printf("Error creating thread. Error code: %d\n", GetLastError());
            closesocket(client_socket); // Clean up if thread creation fails
        }
        else
        {
            CloseHandle(hThread); // We don't need to wait for this thread to finish
        }
    }
    closesocket(server_socket);
    WSACleanup();
  
    return 0;
}

// TO START A SERVER :
// gcc server1.c -o server1.exe -lws2_32

// ./server1.c
